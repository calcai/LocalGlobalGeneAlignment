MatrixChainMultiplication(p, n):
    Initialize matrices m[1..n][1..n] and s[1..n-1][2..n].

    for i = 1 to n:
        m[i][i] = 0

    for l = 2 to n:
        for i = 1 to (n - l + 1):
            j = i + l - 1
            m[i][j] = +âˆž

            for k = i to (j - 1):
                cost = m[i][k] + m[k + 1][j] + p[i-1] * p[k] * p[j]
                if cost < m[i][j]:
                    m[i][j] = cost
                    s[i][j] = k

    optimal_cost = m[1][n]

    ReconstructParenthesization(s, 1, n):

Return optimal_cost
